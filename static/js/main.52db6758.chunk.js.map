{"version":3,"sources":["stores/eventStore.ts","stores/apiStore.ts","stores/userStore.ts","stores/jiraStore.ts","stores/rootStore.ts","pages/GitlabForm.tsx","pages/User.tsx","pages/EventFilterForm.tsx","pages/Events.tsx","pages/JiraLoginForm.tsx","App.tsx","index.tsx"],"names":["EventStore","rootStore","loadEvents","a","result","evnFilter","processParams","userId","userStore","user","id","apiStore","api","Users","events","data","length","push","this","obj","params","item","name","value","observable","action","index","splice","newValue","evn","runInAction","processEvents","console","log","grupedEvents","groupBy","created_at","split","i","ApiStore","reaction","token","window","localStorage","setItem","removeItem","getItem","Gitlab","host","UserStore","current","err","JiraStore","jira","JiraApi","protocol","username","password","apiVersion","strictSSL","configure","enforceActions","RootStoreContext","createContext","eventStore","jiraStore","observer","useContext","setToken","createApi","getUser","Input","icon","iconPosition","placeholder","onChange","e","target","onClick","Message","negative","setParamName","setParamValue","addParam","getEvents","List","Item","map","key","Button","replacer","Object","keys","x","JSON","stringify","setUsername","setPassword","createJira","type","App","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52db6758.chunk.js","sourcesContent":["import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { EventFilterParams } from \"../models/Event\";\r\nimport { Dictionary, groupBy } from \"underscore\";\r\n\r\nexport default class EventStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable events: any[] = [];\r\n    @observable grupedEvents: { [time: string]: any[]; } = {}\r\n    @observable processedEvents: any[] = [];\r\n\r\n    @observable params: EventFilterParams[] = [{\r\n        name: 'after',\r\n        value: \"2020-7-31\"\r\n    } as EventFilterParams];\r\n\r\n    @action addParam = () => {\r\n        this.params.push({\r\n            name: '',\r\n            value: ''\r\n        });\r\n    }\r\n\r\n    @action removeParam = (index: number) => {\r\n        this.params.splice(index, 1);\r\n    }\r\n\r\n    @action setParamName = (newValue: any, id: number) => {\r\n        this.params[id]['name'] = newValue;\r\n    };\r\n\r\n    @action setParamValue = (newValue: any, id: number) => {\r\n        this.params[id]['value'] = newValue;\r\n    };\r\n\r\n    @action getEvents = async () => {\r\n        try {\r\n            var evn = await this.loadEvents();\r\n            runInAction(() => {\r\n                this.events = evn;\r\n            });\r\n            this.processEvents();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    loadEvents = async () => {\r\n        var result: any[] = [];\r\n        var evnFilter = this.processParams();\r\n        var userId = this.rootStore.userStore.user!.id;\r\n        while (true) {\r\n            var data = await this.rootStore.apiStore.api.Users.events(userId, evnFilter);\r\n            if (data.length == 0) {\r\n                break;\r\n            }\r\n            evnFilter['page'] += 1;\r\n            result.push(...data);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    processParams(): any {\r\n        var obj: any = {};\r\n        for (var item of this.params) {\r\n            if (item.name)\r\n                obj[item.name] = item.value;\r\n        }\r\n        obj['perPage'] = 50;\r\n        obj['page'] = 1;\r\n        return obj;\r\n    }\r\n\r\n    @action processEvents = () => {\r\n        var result: { [id: string]: any[]; } = {}\r\n        var grupedEvents: Dictionary<any[]> = groupBy(this.events, (obj: any) => obj.created_at.split('T')[0]);\r\n\r\n        for (var item in grupedEvents) {\r\n            result[item] = [];\r\n            for (let i = 0; i < grupedEvents[item].length; i++) {\r\n                result[item].push(grupedEvents[item][i]);\r\n            }\r\n        }\r\n        runInAction(() => {\r\n            this.grupedEvents = result;\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, reaction, action } from \"mobx\";\r\nimport { Gitlab } from \"@gitbeaker/browser\";\r\n\r\nexport default class ApiStore {\r\n    rootStore: RootStore;\r\n    \r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) \r\n                    window.localStorage.setItem('token', token);\r\n                else\r\n                    window.localStorage.removeItem('token');\r\n            }\r\n        );\r\n    }\r\n    \r\n    @observable token: string | null = window.localStorage.getItem('token');\r\n    @observable api: any | null = null;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action createApi = async () => {\r\n        this.api = new Gitlab({\r\n            host: \"https://gitlab.webix.de/\",\r\n            token: this.token\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { UserSchemaDefault } from \"../models/User\";\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n  \r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n    \r\n  @observable user: UserSchemaDefault | null = null;\r\n  @observable err: string | null = null;\r\n\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await this.rootStore.apiStore.api.Users.current();\r\n\r\n      runInAction(() => {\r\n        this.user = user;\r\n        this.err = null\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.user = null;\r\n        this.err = \"Token is not valid\";\r\n      });\r\n      console.log(error);\r\n    }\r\n  }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\nimport JiraApi from 'jira-client';\r\n\r\nexport default class JiraStore {\r\n  rootStore: RootStore;\r\n  \r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n    \r\n  @observable jira: JiraApi | null = null;\r\n  \r\n  @observable username: string = '';\r\n  @observable password: string = '';\r\n\r\n  @action createJira = async () => {\r\n    this.jira = new JiraApi({\r\n      protocol: 'https',\r\n      host: 'jira.smart-digital.de',\r\n      username: this.username,\r\n      password: this.password,\r\n      apiVersion: '2',\r\n      strictSSL: false\r\n    });\r\n\r\n  }\r\n\r\n  @action setUsername = (username: string) => {\r\n    this.username = username;\r\n  }\r\n  \r\n  @action setPassword = (password: string) => {\r\n    this.password = password;\r\n  }\r\n}","import { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport EventStore from './eventStore';\r\nimport ApiStore from './apiStore';\r\nimport UserStore from './userStore';\r\nimport JiraStore from './jiraStore';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nexport class RootStore {\r\n    eventStore: EventStore;\r\n    apiStore: ApiStore;\r\n    userStore: UserStore;\r\n    jiraStore: JiraStore;\r\n\r\n    constructor() {\r\n        this.eventStore = new EventStore(this);\r\n        this.apiStore = new ApiStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.jiraStore = new JiraStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, Message } from 'semantic-ui-react';\r\n\r\nconst GitlabForm: React.FC = () => {\r\n   const rootStore = useContext(RootStoreContext);\r\n   const { setToken, createApi } = rootStore.apiStore;\r\n   const { getUser, err } = rootStore.userStore;\r\n\r\n   return (\r\n      <>\r\n         <Input icon='key' iconPosition='left' placeholder='Your token'\r\n            onChange={e => setToken(e.target.value)}\r\n            action={{\r\n               icon: 'check',\r\n               onClick: () => {\r\n                  createApi();\r\n                  getUser();\r\n               }\r\n            }} />\r\n\r\n            {err && (\r\n               <Message negative>\r\n                  <p>{err}</p>\r\n               </Message>\r\n            )}\r\n      </>\r\n   );\r\n\r\n};\r\n\r\nexport default observer(GitlabForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\n\r\nconst User: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n\r\n  return (\r\n     <>\r\n      {user && user.name}\r\n     </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(User);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, List, Button } from 'semantic-ui-react';\r\n\r\nconst EventFilterForm: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n  const { params, setParamName, setParamValue, addParam, getEvents, processEvents } = rootStore.eventStore;\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item>\r\n          {params.map((obj, id) => {\r\n            return (\r\n              <div key={id}>\r\n                <Input\r\n                  placeholder='prop name'\r\n                  value={obj.name}\r\n                  onChange={e => setParamName(e.target.value, id)}\r\n                />\r\n                <Input\r\n                  placeholder='prop value'\r\n                  value={obj.value}\r\n                  onChange={e => setParamValue(e.target.value, id)} />\r\n              </div>\r\n            )\r\n          }\r\n          )}\r\n        </List.Item>\r\n\r\n\r\n        <List.Item>\r\n          <Button onClick={addParam}>Add Param</Button>\r\n\r\n          {user && <Button onClick={getEvents}>Submite</Button>}\r\n          \r\n          <Button onClick={processEvents}>Process</Button>\r\n        </List.Item>\r\n      </List>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(EventFilterForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\n\r\nconst Events: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { events, grupedEvents } = rootStore.eventStore;\r\n\r\n    const replacer = (key: any, value: any) => {\r\n        if (value === null || key === 'author' || key === 'author_username' || key === 'author_id'\r\n        || key === 'commit_count'|| key === 'commit_from'|| key === 'commit_to') {\r\n            return;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {events && (\r\n                Object.keys(grupedEvents).map((key, index) => (\r\n                    <div key={index}>\r\n                        <h4>{key}</h4>\r\n                        {grupedEvents[key].map((x: any, id: any) => (\r\n                            <div key={id}>\r\n                                <pre>{JSON.stringify(x, replacer, 4)}</pre>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))\r\n            )}\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default observer(Events);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, Message, Button } from 'semantic-ui-react';\r\n\r\nconst JiraLoginForm: React.FC = () => {\r\n   const rootStore = useContext(RootStoreContext);\r\n   const { setUsername, setPassword, createJira } = rootStore.jiraStore;\r\n\r\n   return (\r\n      <>\r\n         <Input icon='user' iconPosition='left' placeholder='Username' onChange={e => setUsername(e.target.value)}/>\r\n         <Input icon='key' iconPosition='left' placeholder='Password' type='password' onChange={e => setPassword(e.target.value)}/>\r\n         <Button onClick={createJira}>Login</Button>\r\n      </>\r\n   );\r\n\r\n};\r\n\r\nexport default observer(JiraLoginForm);","import React, { useContext, useEffect } from \"react\";\r\nimport { RootStoreContext } from \"./stores/rootStore\";\r\nimport GitlabForm from \"./pages/GitlabForm\";\r\nimport User from \"./pages/User\";\r\nimport EventFilterForm from \"./pages/EventFilterForm\";\r\nimport Events from \"./pages/Events\";\r\nimport JiraLoginForm from \"./pages/JiraLoginForm\";\r\n\r\nconst App: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { token, createApi }  = rootStore.apiStore;\r\n  const { getUser }  = rootStore.userStore;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      console.log(token);\r\n      createApi();\r\n      getUser()\r\n    } \r\n  }, [getUser, createApi, token])\r\n\r\n  return (\r\n    <>\r\n      <h3>GitLab User Token:</h3>\r\n      <GitlabForm />\r\n\r\n      <h3>Jira User:</h3>\r\n      <JiraLoginForm />\r\n\r\n      <h3>User:</h3>\r\n      <User />\r\n\r\n      <h3>Event filter:</h3>\r\n      <EventFilterForm />\r\n\r\n      <h3>Events:</h3>\r\n      <Events />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}