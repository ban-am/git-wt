{"version":3,"sources":["stores/eventStore.ts","stores/apiStore.ts","stores/userStore.ts","stores/jiraStore.ts","stores/rootStore.ts","pages/GitlabForm.tsx","pages/User.tsx","pages/EventFilterForm.tsx","pages/Events.tsx","App.tsx","index.tsx"],"names":["EventStore","observable","ref","rootStore","loadEvents","a","result","evnFilter","processParams","userId","userStore","user","id","apiStore","api","Users","events","data","length","push","this","obj","params","item","name","value","action","index","splice","newValue","evn","runInAction","processEvents","console","log","grupedEvents","groupBy","created_at","split","i","ApiStore","reaction","token","window","localStorage","setItem","removeItem","getItem","Gitlab","host","UserStore","loadingUser","current","err","JiraStore","ticket","configure","enforceActions","RootStoreContext","createContext","eventStore","jiraStore","Title","Typography","observer","useContext","setToken","createApi","getUser","Container","level","title","href","overlayStyle","fontSize","QuestionCircleOutlined","translate","style","color","Group","compact","width","placeholder","onChange","e","target","type","danger","loading","icon","SearchOutlined","onClick","setParamName","setParamValue","addParam","getEvents","removeParam","List","Item","map","key","defaultValue","MinusOutlined","Scroll","require","dayjs","Link","Element","createObj","x","date","Date","newDate","setTime","getTime","getTimezoneOffset","format","push_data","action_name","ref_type","note","target_title","target_type","className","Search","size","enterButton","onSearch","open","float","Object","keys","activeClass","to","spy","smooth","duration","list","dot","ClockCircleOutlined","text","MessageOutlined","DeleteOutlined","CheckCircleOutlined","PlusCircleOutlined","ForkOutlined","print","App","useEffect","GitlabOutlined","direction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55be680c.chunk.js","sourcesContent":["import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { EventFilterParams } from \"../models/Event\";\r\nimport { Dictionary, groupBy } from \"underscore\";\r\n\r\nexport default class EventStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.ref events: any[] = [];\r\n    @observable.ref grupedEvents: { [time: string]: any[]; } = {}\r\n    @observable processedEvents: any[] = [];\r\n    @observable ignoredFileds: string[] = [\"author\",\"author_username\",\"author_id\",\"commit_count\",\"commit_from\",\"commit_to\",\"project_id\",\"target_id\",\"target_iid\",\"position\"];\r\n\r\n    @observable params: EventFilterParams[] = [{\r\n        name: 'after',\r\n        value: \"2020-8-31\"\r\n    } as EventFilterParams];\r\n\r\n    @action addParam = () => {\r\n        this.params.push({\r\n            name: '',\r\n            value: ''\r\n        });\r\n    }\r\n\r\n    @action removeParam = (index: number) => {\r\n        this.params.splice(index, 1);\r\n    }\r\n\r\n    @action setParamName = (newValue: any, id: number) => {\r\n        this.params[id]['name'] = newValue;\r\n    };\r\n\r\n    @action setParamValue = (newValue: any, id: number) => {\r\n        this.params[id]['value'] = newValue;\r\n    };\r\n\r\n    @action getEvents = async () => {\r\n        try {\r\n            var evn = await this.loadEvents();\r\n            runInAction(() => {\r\n                this.events = evn;\r\n            });\r\n            this.processEvents();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    loadEvents = async () => {\r\n        var result: any[] = [];\r\n        var evnFilter = this.processParams();\r\n        var userId = this.rootStore.userStore.user!.id;\r\n        while (true) {\r\n            var data = await this.rootStore.apiStore.api.Users.events(userId, evnFilter);\r\n            if (data.length === 0) {\r\n                break;\r\n            }\r\n            evnFilter['page'] += 1;\r\n            result.push(...data);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    processParams(): any {\r\n        var obj: any = {};\r\n        for (var item of this.params) {\r\n            if (item.name)\r\n                obj[item.name] = item.value;\r\n        }\r\n        obj['perPage'] = 50;\r\n        obj['page'] = 1;\r\n        return obj;\r\n    }\r\n\r\n    @action processEvents = () => {\r\n        var result: { [id: string]: any[]; } = {}\r\n        var grupedEvents: Dictionary<any[]> = groupBy(this.events, (obj: any) => obj.created_at.split('T')[0]);\r\n\r\n        for (var item in grupedEvents) {\r\n            result[item] = [];\r\n            for (let i = 0; i < grupedEvents[item].length; i++) {\r\n                result[item].push(grupedEvents[item][i]);\r\n            }\r\n        }\r\n        runInAction(() => {\r\n            this.grupedEvents = result;\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, reaction, action } from \"mobx\";\r\nimport { Gitlab } from \"@gitbeaker/browser\";\r\n\r\nexport default class ApiStore {\r\n    rootStore: RootStore;\r\n    \r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) \r\n                    window.localStorage.setItem('token', token);\r\n                else\r\n                    window.localStorage.removeItem('token');\r\n            }\r\n        );\r\n    }\r\n    \r\n    @observable token: string | null = window.localStorage.getItem('token');\r\n    @observable api: any | null = null;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action createApi = async () => {\r\n        this.api = new Gitlab({\r\n            host: \"https://gitlab.webix.de/\",\r\n            token: this.token\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { UserSchemaDefault } from \"../models/User\";\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n  \r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n    \r\n  @observable user: UserSchemaDefault | null = null;\r\n  @observable err: string | null = null;\r\n  @observable loadingUser: boolean = false;\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      this.loadingUser = true;\r\n      const user = await this.rootStore.apiStore.api.Users.current();\r\n      runInAction(() => {\r\n        this.user = user;\r\n        this.loadingUser = false;\r\n        this.err = null\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.user = null;\r\n        this.loadingUser = false;\r\n        this.err = \"Token is not valid\";\r\n      });\r\n      console.log(error);\r\n    }\r\n  }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nexport default class JiraStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable ticket: string = \"\";\r\n\r\n  @action setTicket = (ticket: string) => {\r\n    this.ticket = ticket;\r\n  }\r\n}","import { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport EventStore from './eventStore';\r\nimport ApiStore from './apiStore';\r\nimport UserStore from './userStore';\r\nimport JiraStore from './jiraStore';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nexport class RootStore {\r\n    eventStore: EventStore;\r\n    apiStore: ApiStore;\r\n    userStore: UserStore;\r\n    jiraStore: JiraStore;\r\n\r\n    constructor() {\r\n        this.eventStore = new EventStore(this);\r\n        this.apiStore = new ApiStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.jiraStore = new JiraStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { QuestionCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport { Typography, Tooltip, Input, Button } from 'antd';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst GitlabForm: React.FC = () => {\r\n   const rootStore = useContext(RootStoreContext);\r\n   const { setToken, createApi, token } = rootStore.apiStore;\r\n   const { getUser, loadingUser, user } = rootStore.userStore;\r\n\r\n   return (\r\n      <Container>\r\n         <Title level={4}>\r\n            GitLab User Token {' '}\r\n            <Tooltip\r\n               title={<p>Create read_api token here: <a href=\"https://gitlab.webix.de/profile/personal_access_tokens\">wwww.gitlab.webix.de/profile/personal_access_tokens</a></p>}\r\n               overlayStyle={{ fontSize: '14px' }}>\r\n               <QuestionCircleOutlined translate style={{ color: '#ff4d4f', fontSize: '16px' }} />\r\n            </Tooltip>\r\n         </Title>\r\n\r\n         <Input.Group compact style={{ width: '35%' }}>\r\n            <Input placeholder=\"Your token\"\r\n               onChange={e => setToken(e.target.value)}\r\n               value={token as string}\r\n               style={{ width: '90%' }}\r\n            />\r\n\r\n            <Button type='primary'\r\n               danger={!user}\r\n               loading={loadingUser}\r\n               icon={<SearchOutlined translate />}\r\n               style={{ width: '10%' }}\r\n               onClick={() => {\r\n                  createApi();\r\n                  getUser();\r\n               }}></Button>\r\n         </Input.Group>\r\n      </Container>\r\n   );\r\n\r\n};\r\n\r\nexport default observer(GitlabForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\n\r\nconst User: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n\r\n  return (\r\n     <>\r\n      {user && user.name}\r\n     </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(User);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { List } from 'semantic-ui-react';\r\nimport { QuestionCircleOutlined, MinusOutlined } from '@ant-design/icons';\r\nimport { Tooltip, Typography, Button, Space, Input } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst EventFilterForm: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { params, setParamName, setParamValue, addParam, getEvents, removeParam } = rootStore.eventStore;\r\n\r\n  return (\r\n    <>\r\n      <Title level={4}>\r\n        Event filter {' '}\r\n        <Tooltip\r\n          title={<p>All parameters: <a href=\"https://docs.gitlab.com/ee/api/events.html#list-currently-authenticated-users-events\">www.docs.gitlab.com/ee/api/events.html#list-currently-authenticated-users-events</a></p>}\r\n          overlayStyle={{ fontSize: '14px' }}>\r\n          <QuestionCircleOutlined translate style={{ color: '#ff4d4f', fontSize: '16px' }} />\r\n        </Tooltip>\r\n      </Title>\r\n\r\n      <List>\r\n        <List.Item>\r\n          {params.map((obj, id) => {\r\n            return (\r\n              <div key={id}>\r\n                <Space>\r\n                  <Input.Group>\r\n                    <Input\r\n                      placeholder='prop name'\r\n                      defaultValue={obj.name}\r\n                      onChange={e => setParamName(e.target.value, id)}\r\n                      style={{ width: '45%' }} />\r\n\r\n                    <Input\r\n                      placeholder='prop value'\r\n                      value={obj.value}\r\n                      onChange={e => setParamValue(e.target.value, id)}\r\n                      style={{ width: '45%' }} />\r\n\r\n                    <Button\r\n                      type='text'\r\n                      icon={<MinusOutlined translate />}\r\n                      style={{ width: '10%' }}\r\n                      onClick={() => removeParam(id)}></Button>\r\n\r\n                  </Input.Group>\r\n                </Space>\r\n              </div>\r\n            )\r\n          }\r\n          )}\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <Space>\r\n            <Button onClick={addParam}>Add props</Button>\r\n            <Button onClick={getEvents} type=\"primary\">Submit</Button>\r\n          </Space>\r\n        </List.Item>\r\n      </List>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(EventFilterForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Timeline, Typography, Input } from 'antd';\r\nimport { ClockCircleOutlined, MessageOutlined, DeleteOutlined, CheckCircleOutlined, PlusCircleOutlined, ForkOutlined } from '@ant-design/icons';\r\n\r\nconst { Title } = Typography;\r\n\r\nvar Scroll = require('react-scroll');\r\nvar dayjs = require('dayjs')\r\n\r\nconst { Link, Element } = Scroll;\r\n\r\nconst Events: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { events, grupedEvents } = rootStore.eventStore;\r\n\r\n    const getTime = (value: any) => {\r\n        var date = new Date(value);\r\n        var newDate = date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\r\n        return dayjs(newDate).format('H:mm');\r\n    }\r\n\r\n    const createObj = (x: any) => {\r\n        var item: any[] = [];\r\n        item.push(<p>{getTime(x.created_at)}</p>);\r\n\r\n        if (x.push_data) {\r\n            item.push(<p>{x.action_name} {x.push_data.ref_type}</p>);\r\n            item.push(<p>{x.push_data.ref}</p>);\r\n        }\r\n        else if (x.note) {\r\n            console.log(x);\r\n            item.push(<p>{x.action_name}</p>);\r\n            item.push(<p>{x.target_title}</p>);\r\n        } else {\r\n            item.push(<p>{x.action_name} {x.target_type}</p>);\r\n            item.push(<p>{x.target_title}</p>);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    const print = (key: string) => {\r\n        let list = [];\r\n        list.push(<Timeline.Item dot={<ClockCircleOutlined translate style={{ fontSize: '18px' }} />} color=\"red\"><h2>{dayjs(key).format('DD. MM. YYYY (dd)')}</h2></Timeline.Item>);\r\n        list.push(grupedEvents[key].map((x: any, id: any) => {\r\n\r\n            var text = createObj(x);\r\n\r\n            switch (x.action_name) {\r\n                case \"commented on\":\r\n                    return (<Timeline.Item dot={<MessageOutlined translate style={{ fontSize: '18px' }} />} color=\"green\">{text}</Timeline.Item>);\r\n\r\n                case \"deleted\":\r\n                    return (<Timeline.Item dot={<DeleteOutlined translate style={{ fontSize: '18px', color: \"gray\" }} />} >{text}</Timeline.Item>);\r\n\r\n                case \"closed\":\r\n                    return (<Timeline.Item dot={<CheckCircleOutlined translate style={{ fontSize: '18px', color: \"red\" }} />} >{text}</Timeline.Item>);\r\n\r\n                case \"opened\":\r\n                    return (<Timeline.Item dot={<PlusCircleOutlined translate style={{ fontSize: '18px', color: \"green\" }} />} >{text}</Timeline.Item>);\r\n\r\n                case \"accepted\":\r\n                    return (<Timeline.Item dot={<ForkOutlined translate style={{ fontSize: '18px', color: \"blue\" }} />} >{text}</Timeline.Item>);\r\n\r\n                default:\r\n                    return (<Timeline.Item>{text}</Timeline.Item>);\r\n            }\r\n\r\n        }));\r\n        return list;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Title level={4}>\r\n                Events\r\n            </Title>\r\n\r\n            <nav className=\"vertical-nav\">\r\n                <ul>\r\n                    <li>\r\n                        <Input.Search\r\n                            size=\"large\"\r\n                            placeholder=\"Jira ticket number\"\r\n                            enterButton\r\n                            onSearch={value => {\r\n                                window.open(\r\n                                    \"https://jira.smart-digital.de/browse/SMAR-\" + value,\r\n                                    '_blank'\r\n                                );\r\n                            }}\r\n                            style={{ width: 200 }}\r\n                        />\r\n                    </li>\r\n                </ul>\r\n                <ul style={{ float: 'right' }} className=\"timeLineItem\">\r\n                    {Object.keys(grupedEvents).map((key, index) => (\r\n                        <li key={index}>\r\n                            <Link activeClass=\"active\" to={key} spy={true} smooth={true} duration={250} >{dayjs(key).format('DD. MM. YYYY')}</Link>\r\n                        </li>\r\n                    ))}\r\n\r\n                </ul>\r\n            </nav>\r\n            {events && (\r\n                <Timeline className='timeline'>\r\n                    {Object.keys(grupedEvents).map((key, index) => (\r\n                        <Element name={key} className=\"element big\">\r\n                            {print(key)}\r\n                        </Element>\r\n                    ))}\r\n                </Timeline>\r\n            )}\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default observer(Events);","import React, { useContext, useEffect } from \"react\";\r\nimport { RootStoreContext } from \"./stores/rootStore\";\r\nimport GitlabForm from \"./pages/GitlabForm\";\r\nimport User from \"./pages/User\";\r\nimport EventFilterForm from \"./pages/EventFilterForm\";\r\nimport Events from \"./pages/Events\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { GitlabOutlined } from '@ant-design/icons';\r\nimport { Space, Typography } from \"antd\";\r\nconst { Title } = Typography;\r\n\r\nconst App: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { token, createApi } = rootStore.apiStore;\r\n  const { getUser } = rootStore.userStore;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      console.log(token);\r\n      createApi();\r\n      getUser()\r\n    }\r\n  }, [getUser, createApi, token])\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"home-page\">\r\n        <Title style={{ fontSize: '62px' }}><GitlabOutlined translate style={{ fontSize: '72px' }} /> WT</Title>\r\n      </div>\r\n\r\n      <Space direction=\"vertical\">\r\n        <GitlabForm />\r\n        <User />\r\n        <EventFilterForm />\r\n        <Events />\r\n      </Space>\r\n\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'antd/dist/antd.css';\r\nimport './style/style.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}