{"version":3,"sources":["stores/eventStore.ts","stores/apiStore.ts","stores/userStore.ts","stores/jiraStore.ts","stores/rootStore.ts","pages/GitlabForm.tsx","pages/User.tsx","pages/EventFilterForm.tsx","pages/Events.tsx","App.tsx","index.tsx"],"names":["EventStore","observable","ref","rootStore","loadEvents","a","result","evnFilter","processParams","userId","userStore","user","id","apiStore","api","Users","events","data","length","push","this","obj","params","item","name","value","action","index","splice","newValue","evn","runInAction","processEvents","console","log","grupedEvents","groupBy","created_at","split","i","ApiStore","reaction","token","window","localStorage","setItem","removeItem","getItem","Gitlab","host","UserStore","current","err","JiraStore","ticket","configure","enforceActions","RootStoreContext","createContext","eventStore","jiraStore","observer","useContext","setToken","createApi","getUser","Message","href","Input","icon","iconPosition","placeholder","onChange","e","target","color","onClick","negative","setParamName","setParamValue","addParam","getEvents","List","Item","map","key","Button","Scroll","require","dayjs","Link","Element","ignoredFileds","setTicket","replacer","includes","date","Date","newDate","setTime","getTime","getTimezoneOffset","format","className","open","style","float","Object","keys","activeClass","to","spy","smooth","duration","list","dot","ClockCircleOutlined","translate","fontSize","x","text","JSON","stringify","slice","replace","action_name","MessageOutlined","DeleteOutlined","CheckCircleOutlined","PlusCircleOutlined","ForkOutlined","print","App","useEffect","Container","ReactDOM","render","document","getElementById"],"mappings":"uYAKqBA,G,EAOhBC,IAAWC,I,EACXD,IAAWC,I,aALZ,WAAYC,GAAuB,IAAD,gCAFlCA,eAEkC,wYA6ClCC,WA7CkC,qBA6CrB,kCAAAC,EAAA,qDACLC,EAAgB,GAChBC,EAAY,EAAKC,gBACjBC,EAAS,EAAKN,UAAUO,UAAUC,KAAMC,GAHnC,uBAKY,EAAKT,UAAUU,SAASC,IAAIC,MAAMC,OAAOP,EAAQF,GAL7D,UAMe,KADhBU,EALC,QAMIC,OANJ,mDASLX,EAAS,MAAY,EACrBD,EAAOa,KAAP,MAAAb,EAAM,YAASW,IAVV,gDAYFX,GAZE,0CA7CqB,yCAC9Bc,KAAKjB,UAAYA,E,4DA4DjB,IAAIkB,EAAW,GADE,uBAEjB,YAAiBD,KAAKE,OAAtB,+CAA8B,CAAC,IAAtBC,EAAqB,QACtBA,EAAKC,OACLH,EAAIE,EAAKC,MAAQD,EAAKE,QAJb,kFAQjB,OAFAJ,EAAG,QAAc,GACjBA,EAAG,KAAW,EACPA,M,oHAhEqB,M,qHAC2B,M,6CAC1DpB,K,wEAAoC,M,2CACpCA,K,wEAAqC,CAAC,SAAS,kBAAkB,YAAY,eAAe,cAAc,YAAY,aAAa,YAAY,aAAa,e,oCAE5JA,K,wEAAyC,CAAC,CACvCuB,KAAM,QACNC,MAAO,iB,sCAGVC,K,oFAAkB,WACf,EAAKJ,OAAOH,KAAK,CACbK,KAAM,GACNC,MAAO,S,yCAIdC,K,oFAAqB,SAACC,GACnB,EAAKL,OAAOM,OAAOD,EAAO,O,0CAG7BD,K,oFAAsB,SAACG,EAAejB,GACnC,EAAKU,OAAOV,GAAZ,KAA0BiB,M,2CAG7BH,K,oFAAuB,SAACG,EAAejB,GACpC,EAAKU,OAAOV,GAAZ,MAA2BiB,M,uCAG9BH,K,yGAAmB,4BAAArB,EAAA,8EAEI,EAAKD,aAFT,OAER0B,EAFQ,OAGZC,YAAY,WACR,EAAKf,OAASc,IAElB,EAAKE,gBANO,gDAQZC,QAAQC,IAAR,MARY,0D,2CAsCnBR,K,oFAAuB,WACpB,IAAIpB,EAAmC,GACnC6B,EAAkCC,YAAQ,EAAKpB,OAAQ,SAACK,GAAD,OAAcA,EAAIgB,WAAWC,MAAM,KAAK,KAEnG,IAAK,IAAIf,KAAQY,EAAc,CAC3B7B,EAAOiB,GAAQ,GACf,IAAK,IAAIgB,EAAI,EAAGA,EAAIJ,EAAaZ,GAAML,OAAQqB,IAC3CjC,EAAOiB,GAAMJ,KAAKgB,EAAaZ,GAAMgB,IAG7CR,YAAY,WACR,EAAKI,aAAe7B,Q,YCtFXkC,G,EAGjB,WAAYrC,GAAuB,IAAD,gCAFlCA,eAEkC,2IAC9BiB,KAAKjB,UAAYA,EAEjBsC,YACI,kBAAM,EAAKC,OACX,SAAAA,GACOA,EACCC,OAAOC,aAAaC,QAAQ,QAASH,GAErCC,OAAOC,aAAaE,WAAW,Y,mCAK9C7C,K,yEAAkC0C,OAAOC,aAAaG,QAAQ,Y,iCAC9D9C,K,yEAA6B,Q,sCAE7ByB,K,oFAAkB,SAACgB,GAChB,EAAKA,MAAQA,M,uCAGhBhB,K,yGAAmB,sBAAArB,EAAA,qDAChB,EAAKS,IAAM,IAAIkC,SAAO,CAClBC,KAAM,2BACNP,MAAO,EAAKA,QAHA,4C,GCxBHQ,G,EAGnB,WAAY/C,GAAuB,yBAFnCA,eAEkC,oGAChCiB,KAAKjB,UAAYA,G,kCAGlBF,K,yEAA4C,Q,iCAC5CA,K,yEAAgC,Q,qCAGhCyB,K,yGAAiB,4BAAArB,EAAA,8EAEK,EAAKF,UAAUU,SAASC,IAAIC,MAAMoC,UAFvC,OAERxC,EAFQ,OAIdoB,YAAY,WACV,EAAKpB,KAAOA,EACZ,EAAKyC,IAAM,OANC,gDASdrB,YAAY,WACV,EAAKpB,KAAO,KACZ,EAAKyC,IAAM,uBAEbnB,QAAQC,IAAR,MAbc,0D,GCZCmB,G,EAGnB,WAAYlD,GAAuB,yBAFnCA,eAEkC,yEAChCiB,KAAKjB,UAAYA,G,oCAGlBF,K,wEAA4B,M,uCAE5ByB,K,oFAAmB,SAAC4B,GACnB,EAAKA,OAASA,M,GCNlBC,YAAU,CAACC,eAAgB,WAEpB,IAcMC,EAAmBC,wBAAc,IAR1C,aAAe,yBALfC,gBAKc,OAJd9C,cAIc,OAHdH,eAGc,OAFdkD,eAEc,EACVxC,KAAKuC,WAAa,IAAI3D,EAAWoB,MACjCA,KAAKP,SAAW,IAAI2B,EAASpB,MAC7BA,KAAKV,UAAY,IAAIwC,EAAU9B,MAC/BA,KAAKwC,UAAY,IAAIP,EAAUjC,Q,2BCkBxByC,cAhCc,WAC1B,IAAM1D,EAAY2D,qBAAWL,GADG,EAEOtD,EAAUU,SAAzCkD,EAFwB,EAExBA,SAAUC,EAFc,EAEdA,UAAWtB,EAFG,EAEHA,MAFG,EAGDvC,EAAUO,UAAjCuD,EAHwB,EAGxBA,QAASb,EAHe,EAGfA,IAAKzC,EAHU,EAGVA,KAEtB,OACG,oCACA,kBAACuD,EAAA,EAAD,oCAC+B,uBAAGC,KAAK,0DAAR,wDAE5B,kBAACC,EAAA,EAAD,CAAOC,KAAK,MAAMC,aAAa,OAAOC,YAAY,aAC/CC,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOjD,QACjCA,MAAOiB,EACPhB,OAAQ,CACL2C,KAAM,QACNM,MAAe,MAARhE,EAAe,MAAQ,QAC9BiE,QAAS,WACNZ,IACAC,QAILb,GACE,kBAACc,EAAA,EAAD,CAASW,UAAQ,GACd,2BAAIzB,OCbPS,cAZQ,WACrB,IACQlD,EADUmD,qBAAWL,GACF/C,UAAnBC,KAER,OACG,oCACEA,GAAQA,EAAKa,Q,oBCuCLqC,eA5CmB,WAChC,IAAM1D,EAAY2D,qBAAWL,GACrB9C,EAASR,EAAUO,UAAnBC,KAF8B,EAG+BR,EAAUwD,WAAvErC,EAH8B,EAG9BA,OAAQwD,EAHsB,EAGtBA,aAAcC,EAHQ,EAGRA,cAAeC,EAHP,EAGOA,SAAUC,EAHjB,EAGiBA,UACvD,OACE,oCAEE,kBAACf,EAAA,EAAD,wBACmB,uBAAGC,KAAK,wFAAR,qFAEnB,kBAACe,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,KAAN,KACG7D,EAAO8D,IAAI,SAAC/D,EAAKT,GAChB,OACE,yBAAKyE,IAAKzE,GACR,kBAACwD,EAAA,EAAD,CACEG,YAAY,YACZ9C,MAAOJ,EAAIG,KACXgD,SAAU,SAAAC,GAAC,OAAIK,EAAaL,EAAEC,OAAOjD,MAAOb,MAE9C,kBAACwD,EAAA,EAAD,CACEG,YAAY,aACZ9C,MAAOJ,EAAII,MACX+C,SAAU,SAAAC,GAAC,OAAIM,EAAcN,EAAEC,OAAOjD,MAAOb,UAQvD,kBAACsE,GAAA,EAAKC,KAAN,KACE,kBAACG,GAAA,EAAD,CAAQV,QAASI,GAAjB,aAECrE,GAAQ,kBAAC2E,GAAA,EAAD,CAAQV,QAASK,GAAjB,gB,sEChCfM,GAASC,EAAQ,KACjBC,GAAQD,EAAQ,KAEZE,GAAkBH,GAAlBG,KAAMC,GAAYJ,GAAZI,QA2FC9B,eAzFU,WACrB,IAAM1D,EAAY2D,qBAAWL,GADF,EAEqBtD,EAAUwD,WAAlD3C,EAFmB,EAEnBA,OAAQmB,EAFW,EAEXA,aAAcyD,EAFH,EAEGA,cAFH,EAGGzF,EAAUyD,UAAhCN,EAHmB,EAGnBA,OAAQuC,EAHW,EAGXA,UAEVC,EAAW,SAACT,EAAU5D,GACxB,GAAc,OAAVA,IAAkBmE,EAAcG,SAASV,GAA7C,CAGA,GAAY,eAARA,EAAsB,CACtB,IAAIW,EAAO,IAAIC,KAAKxE,GAChByE,EAAUF,EAAKG,QAAQH,EAAKI,UAAuC,GAA3BJ,EAAKK,oBAA2B,KAE5E,OADWZ,GAAMS,GAASI,OAAO,WAGrC,OAAO7E,IAgCX,OACI,oCACI,yBAAK8E,UAAU,gBACX,4BACI,4BACI,kBAACnC,EAAA,EAAD,CAAOG,YAAY,qBACfC,SAAU,SAAAC,GAAC,OAAIoB,EAAUpB,EAAEC,OAAOjD,QAClCA,MAAO6B,EACP5B,OAAQ,CACJ2C,KAAM,WACNO,QAAS,WACLjC,OAAO6D,KACH,6CAA+ClD,EAC/C,gBAMxB,wBAAImD,MAAO,CAAEC,MAAO,UACfC,OAAOC,KAAKzE,GAAciD,IAAI,SAACC,EAAK1D,GAAN,OAC3B,wBAAI0D,IAAK1D,GACL,kBAAC+D,GAAD,CAAMmB,YAAY,SAASC,GAAIzB,EAAK0B,KAAK,EAAMC,QAAQ,EAAMC,SAAU,KAAOxB,GAAMJ,GAAKiB,OAAO,sBAM/GtF,GACG,kBAAC,KAAD,KACK2F,OAAOC,KAAKzE,GAAciD,IAAI,SAACC,EAAK1D,GAAN,OAC3B,kBAACgE,GAAD,CAASnE,KAAM6D,EAAKkB,UAAU,eA5DpC,SAAClB,GACX,IAAI6B,EAAO,GAyBX,OAxBAA,EAAK/F,KAAK,kBAAC,KAASgE,KAAV,CAAegC,IAAK,kBAACC,GAAA,EAAD,CAAqBC,WAAS,EAACZ,MAAO,CAAEa,SAAU,UAAc3C,MAAM,OAAM,4BAAKc,GAAMJ,GAAKiB,OAAO,mBACjIY,EAAK/F,KAAKgB,EAAakD,GAAKD,IAAI,SAACmC,EAAQ3G,GACrC,IAAI4G,EAAO,6BAAMC,KAAKC,UAAUH,EAAGzB,EAAU,GAAG6B,MAAM,GAAI,GAAGC,QAAQ,MAAO,KAC5E,OAAQL,EAAEM,aACN,IAAK,eACD,OAAQ,kBAAC,KAAS1C,KAAV,CAAegC,IAAK,kBAACW,GAAA,EAAD,CAAiBT,WAAS,EAACZ,MAAO,CAAEa,SAAU,UAAc3C,MAAM,SAAS6C,GAE3G,IAAK,UACD,OAAQ,kBAAC,KAASrC,KAAV,CAAegC,IAAK,kBAACY,GAAA,EAAD,CAAgBV,WAAS,EAACZ,MAAO,CAAEa,SAAU,OAAQ3C,MAAO,WAAgB6C,GAE5G,IAAK,SACD,OAAQ,kBAAC,KAASrC,KAAV,CAAegC,IAAK,kBAACa,GAAA,EAAD,CAAqBX,WAAS,EAACZ,MAAO,CAAEa,SAAU,OAAQ3C,MAAO,UAAe6C,GAEhH,IAAK,SACD,OAAQ,kBAAC,KAASrC,KAAV,CAAegC,IAAK,kBAACc,GAAA,EAAD,CAAoBZ,WAAS,EAACZ,MAAO,CAAEa,SAAU,OAAQ3C,MAAO,YAAiB6C,GAEjH,IAAK,WACD,OAAQ,kBAAC,KAASrC,KAAV,CAAegC,IAAK,kBAACe,GAAA,EAAD,CAAcb,WAAS,EAACZ,MAAO,CAAEa,SAAU,OAAQ3C,MAAO,WAAgB6C,GAE1G,QACI,OAAQ,kBAAC,KAASrC,KAAV,KAAgBqC,OAI7BN,EAmCciB,CAAM9C,U,mBCjDpB+C,GAjCO,WACpB,IAAMjI,EAAY2D,qBAAWL,GADH,EAEItD,EAAUU,SAAhC6B,EAFkB,EAElBA,MAAOsB,EAFW,EAEXA,UACPC,EAAa9D,EAAUO,UAAvBuD,QAUR,OARAoE,oBAAU,WACJ3F,IACFT,QAAQC,IAAIQ,GACZsB,IACAC,MAED,CAACA,EAASD,EAAWtB,IAGtB,kBAAC4F,GAAA,EAAD,KACE,kDACA,kBAAC,EAAD,MAKA,qCACA,kBAAC,EAAD,MAEA,6CACA,kBAAC,GAAD,MAEA,uCACA,kBAAC,GAAD,Q,cC/BNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7333532f.chunk.js","sourcesContent":["import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { EventFilterParams } from \"../models/Event\";\r\nimport { Dictionary, groupBy } from \"underscore\";\r\n\r\nexport default class EventStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.ref events: any[] = [];\r\n    @observable.ref grupedEvents: { [time: string]: any[]; } = {}\r\n    @observable processedEvents: any[] = [];\r\n    @observable ignoredFileds: string[] = [\"author\",\"author_username\",\"author_id\",\"commit_count\",\"commit_from\",\"commit_to\",\"project_id\",\"target_id\",\"target_iid\",\"position\"];\r\n\r\n    @observable params: EventFilterParams[] = [{\r\n        name: 'after',\r\n        value: \"2020-8-31\"\r\n    } as EventFilterParams];\r\n\r\n    @action addParam = () => {\r\n        this.params.push({\r\n            name: '',\r\n            value: ''\r\n        });\r\n    }\r\n\r\n    @action removeParam = (index: number) => {\r\n        this.params.splice(index, 1);\r\n    }\r\n\r\n    @action setParamName = (newValue: any, id: number) => {\r\n        this.params[id]['name'] = newValue;\r\n    };\r\n\r\n    @action setParamValue = (newValue: any, id: number) => {\r\n        this.params[id]['value'] = newValue;\r\n    };\r\n\r\n    @action getEvents = async () => {\r\n        try {\r\n            var evn = await this.loadEvents();\r\n            runInAction(() => {\r\n                this.events = evn;\r\n            });\r\n            this.processEvents();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    loadEvents = async () => {\r\n        var result: any[] = [];\r\n        var evnFilter = this.processParams();\r\n        var userId = this.rootStore.userStore.user!.id;\r\n        while (true) {\r\n            var data = await this.rootStore.apiStore.api.Users.events(userId, evnFilter);\r\n            if (data.length === 0) {\r\n                break;\r\n            }\r\n            evnFilter['page'] += 1;\r\n            result.push(...data);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    processParams(): any {\r\n        var obj: any = {};\r\n        for (var item of this.params) {\r\n            if (item.name)\r\n                obj[item.name] = item.value;\r\n        }\r\n        obj['perPage'] = 50;\r\n        obj['page'] = 1;\r\n        return obj;\r\n    }\r\n\r\n    @action processEvents = () => {\r\n        var result: { [id: string]: any[]; } = {}\r\n        var grupedEvents: Dictionary<any[]> = groupBy(this.events, (obj: any) => obj.created_at.split('T')[0]);\r\n\r\n        for (var item in grupedEvents) {\r\n            result[item] = [];\r\n            for (let i = 0; i < grupedEvents[item].length; i++) {\r\n                result[item].push(grupedEvents[item][i]);\r\n            }\r\n        }\r\n        runInAction(() => {\r\n            this.grupedEvents = result;\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, reaction, action } from \"mobx\";\r\nimport { Gitlab } from \"@gitbeaker/browser\";\r\n\r\nexport default class ApiStore {\r\n    rootStore: RootStore;\r\n    \r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) \r\n                    window.localStorage.setItem('token', token);\r\n                else\r\n                    window.localStorage.removeItem('token');\r\n            }\r\n        );\r\n    }\r\n    \r\n    @observable token: string | null = window.localStorage.getItem('token');\r\n    @observable api: any | null = null;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action createApi = async () => {\r\n        this.api = new Gitlab({\r\n            host: \"https://gitlab.webix.de/\",\r\n            token: this.token\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { UserSchemaDefault } from \"../models/User\";\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n  \r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n    \r\n  @observable user: UserSchemaDefault | null = null;\r\n  @observable err: string | null = null;\r\n\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await this.rootStore.apiStore.api.Users.current();\r\n\r\n      runInAction(() => {\r\n        this.user = user;\r\n        this.err = null\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.user = null;\r\n        this.err = \"Token is not valid\";\r\n      });\r\n      console.log(error);\r\n    }\r\n  }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nexport default class JiraStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable ticket: string = \"\";\r\n\r\n  @action setTicket = (ticket: string) => {\r\n    this.ticket = ticket;\r\n  }\r\n}","import { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport EventStore from './eventStore';\r\nimport ApiStore from './apiStore';\r\nimport UserStore from './userStore';\r\nimport JiraStore from './jiraStore';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nexport class RootStore {\r\n    eventStore: EventStore;\r\n    apiStore: ApiStore;\r\n    userStore: UserStore;\r\n    jiraStore: JiraStore;\r\n\r\n    constructor() {\r\n        this.eventStore = new EventStore(this);\r\n        this.apiStore = new ApiStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.jiraStore = new JiraStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, Message } from 'semantic-ui-react';\r\n\r\nconst GitlabForm: React.FC = () => {\r\n   const rootStore = useContext(RootStoreContext);\r\n   const { setToken, createApi, token } = rootStore.apiStore;\r\n   const { getUser, err, user } = rootStore.userStore;\r\n\r\n   return (\r\n      <>\r\n      <Message>\r\n         Create read_api token here: <a href=\"https://gitlab.webix.de/profile/personal_access_tokens\">wwww.gitlab.webix.de/profile/personal_access_tokens</a>\r\n      </Message>\r\n         <Input icon='key' iconPosition='left' placeholder='Your token'\r\n            onChange={e => setToken(e.target.value)}\r\n            value={token}\r\n            action={{\r\n               icon: 'check',\r\n               color: user == null ? 'red' : 'green',\r\n               onClick: () => {\r\n                  createApi();\r\n                  getUser();\r\n               }\r\n            }} />\r\n\r\n            {err && (\r\n               <Message negative>\r\n                  <p>{err}</p>\r\n               </Message>\r\n            )}\r\n      </>\r\n   );\r\n\r\n};\r\n\r\nexport default observer(GitlabForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\n\r\nconst User: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n\r\n  return (\r\n     <>\r\n      {user && user.name}\r\n     </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(User);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, List, Button, Message } from 'semantic-ui-react';\r\n\r\nconst EventFilterForm: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n  const { params, setParamName, setParamValue, addParam, getEvents } = rootStore.eventStore;\r\n  return (\r\n    <>\r\n    \r\n      <Message>\r\n         All parameters: <a href=\"https://docs.gitlab.com/ee/api/events.html#list-currently-authenticated-users-events\">www.docs.gitlab.com/ee/api/events.html#list-currently-authenticated-users-events</a>\r\n      </Message>\r\n      <List>\r\n        <List.Item>\r\n          {params.map((obj, id) => {\r\n            return (\r\n              <div key={id}>\r\n                <Input\r\n                  placeholder='prop name'\r\n                  value={obj.name}\r\n                  onChange={e => setParamName(e.target.value, id)}\r\n                />\r\n                <Input\r\n                  placeholder='prop value'\r\n                  value={obj.value}\r\n                  onChange={e => setParamValue(e.target.value, id)} />\r\n              </div>\r\n            )\r\n          }\r\n          )}\r\n        </List.Item>\r\n\r\n\r\n        <List.Item>\r\n          <Button onClick={addParam}>Add Param</Button>\r\n\r\n          {user && <Button onClick={getEvents}>Submite</Button>}\r\n          \r\n          {/* <Button onClick={processEvents}>Process</Button> */}\r\n        </List.Item>\r\n      </List>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(EventFilterForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Timeline } from 'antd';\r\nimport { ClockCircleOutlined, MessageOutlined, DeleteOutlined, CheckCircleOutlined, PlusCircleOutlined, ForkOutlined } from '@ant-design/icons';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nvar Scroll = require('react-scroll');\r\nvar dayjs = require('dayjs')\r\n\r\nconst { Link, Element } = Scroll;\r\n\r\nconst Events: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { events, grupedEvents, ignoredFileds } = rootStore.eventStore;\r\n    const { ticket, setTicket } = rootStore.jiraStore;\r\n\r\n    const replacer = (key: any, value: any) => {\r\n        if (value === null || ignoredFileds.includes(key)) {\r\n            return;\r\n        }\r\n        if (key === 'created_at') {\r\n            var date = new Date(value);\r\n            var newDate = date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\r\n            var data = dayjs(newDate).format('H:mm:ss');\r\n            return data;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    const print = (key: string) => {\r\n        let list = [];\r\n        list.push(<Timeline.Item dot={<ClockCircleOutlined translate style={{ fontSize: '18px' }} />} color=\"red\"><h2>{dayjs(key).format('DD. MM. YYYY')}</h2></Timeline.Item>);\r\n        list.push(grupedEvents[key].map((x: any, id: any) => {\r\n            var text = <pre>{JSON.stringify(x, replacer, 1).slice(2, -2).replace(/\\\"/g, '')}</pre>;\r\n            switch (x.action_name) {\r\n                case \"commented on\":\r\n                    return (<Timeline.Item dot={<MessageOutlined translate style={{ fontSize: '18px' }} />} color=\"green\">{text}</Timeline.Item>);\r\n\r\n                case \"deleted\":\r\n                    return (<Timeline.Item dot={<DeleteOutlined translate style={{ fontSize: '18px', color: \"gray\" }} />} >{text}</Timeline.Item>);\r\n\r\n                case \"closed\":\r\n                    return (<Timeline.Item dot={<CheckCircleOutlined translate style={{ fontSize: '18px', color: \"red\" }} />} >{text}</Timeline.Item>);\r\n\r\n                case \"opened\":\r\n                    return (<Timeline.Item dot={<PlusCircleOutlined translate style={{ fontSize: '18px', color: \"green\" }} />} >{text}</Timeline.Item>);\r\n\r\n                case \"accepted\":\r\n                    return (<Timeline.Item dot={<ForkOutlined translate style={{ fontSize: '18px', color: \"blue\" }} />} >{text}</Timeline.Item>);\r\n\r\n                default:\r\n                    return (<Timeline.Item>{text}</Timeline.Item>);\r\n            }\r\n\r\n        }));\r\n        return list;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"vertical-nav\">\r\n                <ul>\r\n                    <li>\r\n                        <Input placeholder='Jira ticket number'\r\n                            onChange={e => setTicket(e.target.value)}\r\n                            value={ticket}\r\n                            action={{\r\n                                icon: 'external',\r\n                                onClick: () => {\r\n                                    window.open(\r\n                                        \"https://jira.smart-digital.de/browse/SMAR-\" + ticket,\r\n                                        '_blank'\r\n                                      );\r\n                                }\r\n                            }} />\r\n                    </li>\r\n                </ul>\r\n                <ul style={{ float: 'right'}}>\r\n                    {Object.keys(grupedEvents).map((key, index) => (\r\n                        <li key={index}>\r\n                            <Link activeClass=\"active\" to={key} spy={true} smooth={true} duration={250} >{dayjs(key).format('DD. MM. YYYY')}</Link>\r\n                        </li>\r\n                    ))}\r\n                    \r\n                </ul>\r\n            </nav>\r\n            {events && (\r\n                <Timeline >\r\n                    {Object.keys(grupedEvents).map((key, index) => (\r\n                        <Element name={key} className=\"element big\">\r\n                            {print(key)}\r\n                        </Element>\r\n                    ))}\r\n                </Timeline>\r\n            )}\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default observer(Events);","import React, { useContext, useEffect } from \"react\";\r\nimport { RootStoreContext } from \"./stores/rootStore\";\r\nimport GitlabForm from \"./pages/GitlabForm\";\r\nimport User from \"./pages/User\";\r\nimport EventFilterForm from \"./pages/EventFilterForm\";\r\nimport Events from \"./pages/Events\";\r\nimport 'antd/dist/antd.css';\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nconst App: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { token, createApi }  = rootStore.apiStore;\r\n  const { getUser }  = rootStore.userStore;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      console.log(token);\r\n      createApi();\r\n      getUser()\r\n    } \r\n  }, [getUser, createApi, token])\r\n\r\n  return (\r\n    <Container>\r\n      <h3>GitLab User Token:</h3>\r\n      <GitlabForm />\r\n\r\n      {/* <h3>Jira User:</h3>\r\n      <JiraLoginForm /> */}\r\n\r\n      <h3>User:</h3>\r\n      <User />\r\n\r\n      <h3>Event filter:</h3>\r\n      <EventFilterForm />\r\n\r\n      <h3>Events:</h3>\r\n      <Events />\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './style/style.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}