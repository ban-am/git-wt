{"version":3,"sources":["api/agent.ts","stores/eventStore.ts","stores/apiStore.ts","stores/userStore.ts","stores/jiraStore.ts","stores/rootStore.ts","pages/GitlabForm.tsx","pages/User.tsx","pages/EventFilterForm.tsx","pages/Events.tsx","App.tsx","index.tsx"],"names":["axios","defaults","baseURL","interceptors","response","use","undefined","error","console","log","responseBody","data","requests","url","header","get","headers","then","Jira","issue","user","crateHeader","accountId","hash","Buffer","from","username","password","toString","EventStore","rootStore","loadEvents","a","result","evnFilter","processParams","userId","userStore","id","apiStore","api","Users","events","length","push","this","obj","params","item","name","value","observable","action","index","splice","newValue","evn","runInAction","processEvents","grupedEvents","groupBy","created_at","split","i","ApiStore","reaction","token","window","localStorage","setItem","removeItem","getItem","Gitlab","host","UserStore","current","err","JiraStore","values","agent","configure","enforceActions","RootStoreContext","createContext","eventStore","jiraStore","observer","useContext","setToken","createApi","getUser","Input","icon","iconPosition","placeholder","onChange","e","target","color","onClick","Message","negative","setParamName","setParamValue","addParam","getEvents","List","Item","map","key","Button","ignoredFileds","replacer","includes","Date","toTimeString","Object","keys","x","JSON","stringify","App","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07dafef7.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { JiraUser } from '../models/User';\r\n\r\naxios.defaults.baseURL = \"https://jira.smart-digital.de/rest/api/2\";\r\n\r\n// axios.interceptors.request.use(\r\n//     config => {\r\n//         const token = window.localStorage.getItem('jwt');\r\n//         if (token) config.headers.Authorization = `Bearer ${token}`;\r\n//         return config;\r\n//     },\r\n//     error => {\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    // const { status, data, config, headers } = error.response;\r\n    console.log(error);    \r\n  });\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst requests = {\r\n    post: (url: string, body: {}, header: {}) =>\r\n        axios\r\n            .post(url, body, {\r\n                headers: header\r\n            })\r\n            .then(responseBody),\r\n    get: (url: string, header: {}) =>\r\n        axios\r\n            .get(url, {\r\n                headers: header\r\n            })\r\n            .then(responseBody),\r\n}\r\n\r\nconst Jira = {\r\n    issue: (user: JiraUser, issue: string): Promise<any> => requests.get(`/issue/SMAR-2627`, crateHeader(user)),\r\n\r\n    accountId: (user: JiraUser): Promise<any> => requests.get(\"user/bulk/migration\", crateHeader(user))\r\n}\r\n const crateHeader = (user: JiraUser): any => {\r\n     var hash = Buffer.from(user.username+\":\"+user.password).toString('base64');\r\n    return {\r\n        'Authorization': `Basic ${hash}`,\r\n        'Accept': 'application/json'\r\n      }\r\n }\r\n\r\nexport default {\r\n    Jira\r\n  };\r\n  ","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { EventFilterParams } from \"../models/Event\";\r\nimport { Dictionary, groupBy } from \"underscore\";\r\n\r\nexport default class EventStore {\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable events: any[] = [];\r\n    @observable grupedEvents: { [time: string]: any[]; } = {}\r\n    @observable processedEvents: any[] = [];\r\n    @observable ignoredFileds: string = \"author author_username author_id commit_count commit_from commit_to\";\r\n\r\n    @observable params: EventFilterParams[] = [{\r\n        name: 'after',\r\n        value: \"2020-7-31\"\r\n    } as EventFilterParams];\r\n\r\n    @action addParam = () => {\r\n        this.params.push({\r\n            name: '',\r\n            value: ''\r\n        });\r\n    }\r\n\r\n    @action removeParam = (index: number) => {\r\n        this.params.splice(index, 1);\r\n    }\r\n\r\n    @action setParamName = (newValue: any, id: number) => {\r\n        this.params[id]['name'] = newValue;\r\n    };\r\n\r\n    @action setParamValue = (newValue: any, id: number) => {\r\n        this.params[id]['value'] = newValue;\r\n    };\r\n\r\n    @action getEvents = async () => {\r\n        try {\r\n            var evn = await this.loadEvents();\r\n            runInAction(() => {\r\n                this.events = evn;\r\n            });\r\n            this.processEvents();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    loadEvents = async () => {\r\n        var result: any[] = [];\r\n        var evnFilter = this.processParams();\r\n        var userId = this.rootStore.userStore.user!.id;\r\n        while (true) {\r\n            var data = await this.rootStore.apiStore.api.Users.events(userId, evnFilter);\r\n            if (data.length === 0) {\r\n                break;\r\n            }\r\n            evnFilter['page'] += 1;\r\n            result.push(...data);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    processParams(): any {\r\n        var obj: any = {};\r\n        for (var item of this.params) {\r\n            if (item.name)\r\n                obj[item.name] = item.value;\r\n        }\r\n        obj['perPage'] = 50;\r\n        obj['page'] = 1;\r\n        return obj;\r\n    }\r\n\r\n    @action processEvents = () => {\r\n        var result: { [id: string]: any[]; } = {}\r\n        var grupedEvents: Dictionary<any[]> = groupBy(this.events, (obj: any) => obj.created_at.split('T')[0]);\r\n\r\n        for (var item in grupedEvents) {\r\n            result[item] = [];\r\n            for (let i = 0; i < grupedEvents[item].length; i++) {\r\n                result[item].push(grupedEvents[item][i]);\r\n            }\r\n        }\r\n        runInAction(() => {\r\n            this.grupedEvents = result;\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, reaction, action } from \"mobx\";\r\nimport { Gitlab } from \"@gitbeaker/browser\";\r\n\r\nexport default class ApiStore {\r\n    rootStore: RootStore;\r\n    \r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) \r\n                    window.localStorage.setItem('token', token);\r\n                else\r\n                    window.localStorage.removeItem('token');\r\n            }\r\n        );\r\n    }\r\n    \r\n    @observable token: string | null = window.localStorage.getItem('token');\r\n    @observable api: any | null = null;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action createApi = async () => {\r\n        this.api = new Gitlab({\r\n            host: \"https://gitlab.webix.de/\",\r\n            token: this.token\r\n        });\r\n    }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action, runInAction } from \"mobx\";\r\nimport { UserSchemaDefault } from \"../models/User\";\r\n\r\nexport default class UserStore {\r\n  rootStore: RootStore;\r\n  \r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n    \r\n  @observable user: UserSchemaDefault | null = null;\r\n  @observable err: string | null = null;\r\n\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await this.rootStore.apiStore.api.Users.current();\r\n\r\n      runInAction(() => {\r\n        this.user = user;\r\n        this.err = null\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.user = null;\r\n        this.err = \"Token is not valid\";\r\n      });\r\n      console.log(error);\r\n    }\r\n  }\r\n}","import { RootStore } from \"./rootStore\";\r\nimport { observable, action } from \"mobx\";\r\nimport JiraApi from 'jira-client';\r\nimport { JiraUser } from \"../models/User\";\r\nimport agent from \"../api/agent\";\r\n\r\nexport default class JiraStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable jira: JiraApi | null = null;\r\n\r\n  @observable username: string = '';\r\n  @observable password: string = '';\r\n\r\n  @action login = async (values: JiraUser) => {\r\n    try {\r\n      await agent.Jira.issue(values, \"\");\r\n    } catch (error) {\r\n      \r\n    }\r\n    // this.jira = new JiraApi({\r\n    //   protocol: 'https',\r\n    //   host: 'jira.smart-digital.de',\r\n    //   username: this.username,\r\n    //   password: this.password,\r\n    //   apiVersion: '2',\r\n    //   strictSSL: false\r\n    // });\r\n\r\n  }\r\n}","import { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport EventStore from './eventStore';\r\nimport ApiStore from './apiStore';\r\nimport UserStore from './userStore';\r\nimport JiraStore from './jiraStore';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nexport class RootStore {\r\n    eventStore: EventStore;\r\n    apiStore: ApiStore;\r\n    userStore: UserStore;\r\n    jiraStore: JiraStore;\r\n\r\n    constructor() {\r\n        this.eventStore = new EventStore(this);\r\n        this.apiStore = new ApiStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.jiraStore = new JiraStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, Message } from 'semantic-ui-react';\r\n\r\nconst GitlabForm: React.FC = () => {\r\n   const rootStore = useContext(RootStoreContext);\r\n   const { setToken, createApi, token } = rootStore.apiStore;\r\n   const { getUser, err, user } = rootStore.userStore;\r\n\r\n   return (\r\n      <>\r\n         <Input icon='key' iconPosition='left' placeholder='Your token'\r\n            onChange={e => setToken(e.target.value)}\r\n            value={token}\r\n            action={{\r\n               icon: 'check',\r\n               color: user == null ? 'red' : 'green',\r\n               onClick: () => {\r\n                  createApi();\r\n                  getUser();\r\n               }\r\n            }} />\r\n\r\n            {err && (\r\n               <Message negative>\r\n                  <p>{err}</p>\r\n               </Message>\r\n            )}\r\n      </>\r\n   );\r\n\r\n};\r\n\r\nexport default observer(GitlabForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\n\r\nconst User: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n\r\n  return (\r\n     <>\r\n      {user && user.name}\r\n     </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(User);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { Input, List, Button } from 'semantic-ui-react';\r\n\r\nconst EventFilterForm: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { user } = rootStore.userStore;\r\n  const { params, setParamName, setParamValue, addParam, getEvents, processEvents } = rootStore.eventStore;\r\n\r\n  return (\r\n    <>\r\n      <List>\r\n        <List.Item>\r\n          {params.map((obj, id) => {\r\n            return (\r\n              <div key={id}>\r\n                <Input\r\n                  placeholder='prop name'\r\n                  value={obj.name}\r\n                  onChange={e => setParamName(e.target.value, id)}\r\n                />\r\n                <Input\r\n                  placeholder='prop value'\r\n                  value={obj.value}\r\n                  onChange={e => setParamValue(e.target.value, id)} />\r\n              </div>\r\n            )\r\n          }\r\n          )}\r\n        </List.Item>\r\n\r\n\r\n        <List.Item>\r\n          <Button onClick={addParam}>Add Param</Button>\r\n\r\n          {user && <Button onClick={getEvents}>Submite</Button>}\r\n          \r\n          <Button onClick={processEvents}>Process</Button>\r\n        </List.Item>\r\n      </List>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default observer(EventFilterForm);","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\n\r\nconst Events: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { events, grupedEvents, ignoredFileds } = rootStore.eventStore;\r\n\r\n    const replacer = (key: any, value: any) => {\r\n        if (value === null || ignoredFileds.split(\" \").includes(key)) {\r\n            return;\r\n        }\r\n        if (key == 'created_at') { \r\n            return (new Date(value)).toTimeString();\r\n        }\r\n        return value;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {events && (\r\n                Object.keys(grupedEvents).map((key, index) => (\r\n                    <div key={index}>\r\n                        <h4>{key}</h4>\r\n                        {grupedEvents[key].map((x: any, id: any) => (\r\n                            <div key={id}>\r\n                                <pre>{JSON.stringify(x, replacer, 4)}</pre>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))\r\n            )}\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default observer(Events);","import React, { useContext, useEffect } from \"react\";\r\nimport { RootStoreContext } from \"./stores/rootStore\";\r\nimport GitlabForm from \"./pages/GitlabForm\";\r\nimport User from \"./pages/User\";\r\nimport EventFilterForm from \"./pages/EventFilterForm\";\r\nimport Events from \"./pages/Events\";\r\n\r\nconst App: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { token, createApi }  = rootStore.apiStore;\r\n  const { getUser }  = rootStore.userStore;\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      console.log(token);\r\n      createApi();\r\n      getUser()\r\n    } \r\n  }, [getUser, createApi, token])\r\n\r\n  return (\r\n    <>\r\n      <h3>GitLab User Token:</h3>\r\n      <GitlabForm />\r\n\r\n      {/* <h3>Jira User:</h3>\r\n      <JiraLoginForm /> */}\r\n\r\n      <h3>User:</h3>\r\n      <User />\r\n\r\n      <h3>Event filter:</h3>\r\n      <EventFilterForm />\r\n\r\n      <h3>Events:</h3>\r\n      <Events />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}